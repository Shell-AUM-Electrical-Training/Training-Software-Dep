const byte displayPins[8] = {2, 3, 4, 5, 6, 7, 8, 9};

const byte Row[4] = {10, 11, 12, 13}; 
const byte colm[4] = {A1, A2, A3, A4}; 
const char keyMap[4][4] = {
  {'1', '2', '3', 'A'}, {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},{'*', '0', '#', 'D'}};
const bool commonAnode = false; 
const byte charMap[15] = {0b11111100, 0b01100000, 0b11011010, 0b11110010, 0b01100110, 0b10110110, 0b10111110, 0b11100000, 0b11111110, 0b11100110, 
  0b11101110, 0b00111110, 0b00011010, 0b01111010, 0b01101110  };
bool DPon = false;const int samplingRate = 10; 

void setup() {
  
  for (byte i = 0; i < 8; i++) {
    pinMode(displayPins[i], OUTPUT);
    digitalWrite(displayPins[i], commonAnode);}
  
  for (byte i = 0; i < 4; i++) {
    pinMode(Row[i], OUTPUT);
    digitalWrite(Row[i], HIGH);
    pinMode(colm[i], INPUT_PULLUP);
  }
}

void loop() { char c = getKeypadInput();
  switch (c) {
    case 0:
      break;
    case '*':
      DPon = !DPon;
      if (commonAnode)
        digitalWrite(displayPins[7], !DPon);
      else
        digitalWrite(displayPins[7], DPon);
      break;
    default:
      displayCharOn7Segments(c, DPon);
      break;
  }
  delay(samplingRate);
}

char getKeypadInput() {
  for (byte i = 0; i < 4; i++) {
    digitalWrite(Row[i], LOW);
    for (byte j = 0; j < 4; j++) {
      if (digitalRead(colm[j]) == LOW) {
        digitalWrite(Row[i], HIGH);
        return keyMap[i][j];}} digitalWrite(Row[i], HIGH);}
  return 0; 
}


void displayCharOn7Segments(char c, bool withDP) {  
  byte mappedChar;
  
  switch (c) {
    case 'A': mappedChar = charMap[10]; break;
    case 'B': mappedChar = charMap[11]; break;
    case 'C': mappedChar = charMap[12]; break;
    case 'D': mappedChar = charMap[13]; break;
    case '#': mappedChar = charMap[14]; break;
    default:  mappedChar = charMap[c - '0']; break; 
  }
  
  if (withDP) mappedChar++;
  if (commonAnode) mappedChar = ~mappedChar;
  
  for (byte i = 0; i < 8; i++)
    digitalWrite(displayPins[i], bitRead(mappedChar,7-i));
}